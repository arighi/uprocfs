=== uprocfs: procfs in userspace ===

Overview
~~~~~~~~
uprocfs is a user-space implementation of the kernel's procfs.

Its purpose is not to replace procfs, but to speed up the retrievel of certain
informations without scanning all the files under /proc.

uprocfs is designed to be ultra-super-fast to retrieve specific informations,
compared to the standard procfs interface.

Design
~~~~~~
The basic idea is to provide a facility to implement different views of the
proc filesystem, grouping PIDs by generic rules and associating them to
different PID namespaces.

The hierarchy of uprocfs might look as follows:

                     uprocfs
                        |
                        v
                  ________________
                 |     |    ...   |
                 v     v          v
                ns1  ns2        nsN
               |  |
               v  v
             pid1 pid2 ...

Where:
  - ns1, ns2, ...: are the different PID namespaces
  - pid1, pid2, ...: are the PIDs that run inside the different PID namespaces

PID namespaces are represented as regular files inside uprocfs. Each
namespace's file contains the list of PIDs that run inside the namespace.

A userspace daemon, called uproc, listens to all kernel events that involve
creation, exit, UID/GID/command name change of any process in the system and
stores all these informations to internal data structures, that are designed to
speed up specific interrogations to the filesystem.

The user can define custom rules to create different PID namespaces inside
uprocfs.

A configuration file must be passed to the uproc daemon; the configuration file
contains all the generic rules (at the moment based on the UID, GID and command
name of the tasks) to associate PIDs to different namespaces.

Then, the daemon exports the different namespaces to the external
applications using a FUSE filesystem (http://fuse.sourceforge.net/).

Configuration
~~~~~~~~~~~~~
uproc uses /etc/uproc.conf as default configuration file.

The configuration file contains a list of rules which assign a PID namespace to
a set of tasks according to their uid, gid and command name.

Each rule is defined in the form:

  <key1> <val1> [<key2> <val2> ...]  <name>

Where:

  <key1>, <key2>, ... can be:
         - uid: select all tasks of a certain UID
         - gid: select all tasks of a certain GID
         - cmd: select all tasks that have a particular name

  <val1>, <val2>, ... are:
         - the UID number if the key is "uid"
         - the GID number if the key is "gid"
         - the command name string if the key is "cmd"

  <name> is the name of the namespace

NOTE:
  - uprocfs currently allows to define rules based on UIDs, GIDs and process
    name.
  - the same PID can be placed in multiple namespaces
  - don't define multiple entries with the same namespace name! The name of
    the namespace must be unique among all namespaces.

A configuration file for starters can be auto-generated using the helper script
tools/uproc-config.pl; for example:

  $ ./tools/uproc-config.pl | sudo tee /etc/uproc.conf

With this auto-generated configuration file, uproc will create a PID namespace
for each UID and GID defined in the system.

All namespaces are represented inside uprocfs in the following form:
  uid.<username>
  gid.<groupname>

Where:
   - <username> is the name of the user as reported in /etc/passwd
   - <groupname> is the name of the group as reported in /etc/group

Usage
~~~~~
 - create a configuration file (i.e, in /etc/uproc.conf), for example:
   $ cat /etc/uproc.conf
   uid 1000 my_username
   gid 34 groups.backup
   cmd tar software.backup

 - mount uproc filesystem to /uproc:
   # ./uproc -o allow_other /uproc

This will create two different namespaces, that are represented as regular
files inside uprocfs:
  /uproc/my_username
  /uproc/groups.backup
  /uproc/software.tar

The first one contains all the PIDs that run as UID 1000, the second file
contains all the PIDs that run as GID 34, the third file contains all the
"tar" commands that run on the system.

See also:
   # ./uproc --help

Performance results
~~~~~~~~~~~~~~~~~~~
Following is reported a simple test that was used to measure the advantages of
using the uproc interface respect to the classic procps interface.

Test case:
 - create 100K namespaces (to stress-test uprocfs internal structures):
   $ for i in `seq 1 100000`; do echo "uid $i uid.$i; done | sudo tee /etc/uproc.conf

 - create 10K tasks as UID 1000:
   $ for i in `seq 1 10000`; do sleep 10000 & done

 - select all the PIDs of UID 1000:

   - a simple grep in /proc:

     # time grep "Uid:[[:space:]]*1000[[:space:]]" /proc/*/status | wc -l
     10057

     real	0m0.355s
     user	0m0.070s
     sys	0m0.287s

   - with procps:

     # time pgrep -u 1000 | wc -l
     10057

     real	0m0.248s
     user	0m0.038s
     sys	0m0.211s

   - with uprocfs:

     # time wc -l /uproc/uid.1000
     10057

     real	0m0.007s
     user	0m0.000s
     sys	0m0.000s

For this particular test uproc is ~50 times faster than a simple grep in /proc
and ~35 faster than pgrep!

Overhead added to the system:

  - to measure the overhead in the system we ran hackbench (a fork-intensive
    application) and compared the benchmark result with and without the uproc
    daemon running:

    - without uproc
      $ ./hackbench 100: average time 6.590

    - with uproc
      $ ./hackbench 100: average time 6.594

With uproc the performance of hackbench are reduced only by the 0.06%. This is
a very small value which can be classified as measurement error.

Examples
~~~~~~~~
NOTE: all the following examples assume uprocfs is mounted on /uproc.

The configuration file used in this examples can be found in ./etc/uproc.conf.

 - show all the running PIDs of user "my_user":

# cat /uproc/my_user

 - count the tasks of the user "my_user":

# wc -l < /uproc/my_user
55 /uproc/my_user

 - show all programs currently executed by user "my_user":

# cat $(sed 's:.*:/proc/&/comm:' /uproc/my_user) | sort -u
bash
dbus-daemon
dbus-launch
fetchmail
fluxbox
gconfd-2
gconf-helper
gnome-keyring-d
gnome-power-man
gnome-pty-helpe
gnome-settings-
gnome-volume-co
gvfs-afc-volume
gvfsd
gvfsd-burn
gvfs-fuse-daemo
gvfs-gdu-volume
gvfs-gphoto2-vo
mutt
nautilus
parcellite
pidgin
pulseaudio
ssh-agent
syndaemon
xterm

 - send a SIGTERM to all processes of user "my_user" (kill all sessions):

# kill `cat /uproc/my_user`

 - show all bytes read and written by "my_user" from block devices:

# echo `sed -ne "s/^read_bytes: //p" $(sed 's:.*:/proc/&/io:' /uproc/my_user) | tr "\n" +`0 | bc -l
141639680
# echo `sed -ne "s/^write_bytes: //p" $(sed 's:.*:/proc/&/io:' /uproc/my_user) | tr "\n" +`0 | bc -l
4071424

BUGS
~~~~
The solution used to implement the uproc daemon involves few concerns:

 - poor reliability of netlink socket (messages can be dropped)

 - delay incurred since a proc event took place and PID was actually reported
   in the uprocfs

TODO
~~~~
 - consider to use an alternative way to report proc events to userspace (stop
   using netlink and maybe introduce a dedicate support in the kernel)

 - re-read the configuration file at runtime without remounting uprocfs
